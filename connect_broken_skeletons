import networkx as nx
import numpy as np
import os
import skimage

# Folder containing the SWC files for the skeletons
skeleton_folder = "/Users/ramyarajalakshmi/Documents/Segmentation/mv_heart/MST_ILP/merge_skeletons/results_folder/"

# Load the skeleton data from SWC files in the folder
skeletons = []
for filename in os.listdir(skeleton_folder):
    if filename.endswith(".swc"):
        skeleton = []
        with open(os.path.join(skeleton_folder, filename), "r") as f:
            for line in f:
                if line.startswith("#"):
                    continue
                fields = line.strip().split()
                if len(fields) < 7:
                    continue
                index = int(fields[0])
                type_id = int(fields[1])
                x = float(fields[2])
                y = float(fields[3])
                z = float(fields[4])
                radius = float(fields[5])
                parent = int(fields[6])
                skeleton.append((x, y, z, index, parent))
        skeletons.append(skeleton)

# Load the image data from a 3D numpy array
image = np.load("/Users/ramyarajalakshmi/Documents/Segmentation/mv_heart/kristin_data/1683/1683_raw_tiff_(red).npy")
print(image.shape)

normalized_image = 255 - image


# Create a graph
G = nx.Graph()

# Add nodes for each skeleton point
# for skeleton in skeletons:
#     for i, point in enumerate(skeleton):
        

# Add edges based on image evidence
threshold = 4000
for i, skeleton_i in enumerate(skeletons):
    #G.add_node(i, skeleton.index)
    for j, skeleton_j in enumerate(skeletons[i+1:], start=i+1):
        #G.add_node(j, skeleton.index)
        for p in skeleton_i:
            #print(p)
            for q in skeleton_j:
                # Extract coordinates from tuples p and q
                x1, y1, z1 = p[:3]
                x2, y2, z2 = q[:3]
                
#                 print(x1, y1, z1)
#                 print(x2, y2, z2)
#                 z1 = z1 % image.shape[2]
#                 z2 = z2 % image.shape[2]
#                 G.add_node((p[3], i))
#                 G.add_node((q[3], j))

                # Calculate the Euclidean distance between points p and q
                distance = np.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2 + (z1 - z2) ** 2)
                # Calculate the probability of an edge between points p and q
                # based on image evidence
                #print(x1, y1, z1, x2, y2, z2)
                if distance <= 50 and (0 <= int(x1) <= normalized_image.shape[0] and 
                    0 <= int(y1) <= normalized_image.shape[1] and 
                    0 <= int(z1) <= normalized_image.shape[2] and 
                    0 <= int(x2) <= normalized_image.shape[0] and 
                    0 <= int(y2) <= normalized_image.shape[1] and 
                    0 <= int(z2) <= normalized_image.shape[2]):

                    print('node found')
                    start = [int(x1), int(y1), int(z1)]
                    end = [int(x2), int(y2), int(z2)]

                    # set bounding box between 
                    bbox = np.array([start, end])
                    min_coords = np.min(bbox, axis=0)
                    max_coords = np.max(bbox, axis=0)


                    cropped_image = normalized_image[min_coords[0]:max_coords[0]+1,
                                        min_coords[1]:max_coords[1]+1,
                                        min_coords[2]:max_coords[2]+1]

                    path = skimage.graph.route_through_array(
                                   cropped_image,
                                   [start[0]-min_coords[0], start[1]-min_coords[1], start[2]-min_coords[2]],
                                   [end[0]-min_coords[0], end[1]-min_coords[1], end[2]-min_coords[2]],
                                   fully_connected=True,
                                    geometric=True,
                                         )
                    if path[1] < threshold:
                        G.add_edge(p, q)
                        print('edge successfully added')
                    else:
                        print("skipping the incorrect edge")
                    #probability = np.mean(intensities)
#                 else:
#                 # handle the case where the indices are out of bounds
#                     probability = 0.0 # or some other default value
                    
                #probability = image[x1, y1, z1] * image[x2, y2, z2]
                #print(probability)
                # Add an edge if the probability exceeds a threshold
                #print(probability)
#                     above_threshold = [x > threshold for x in intensities]
#                     if all(above_threshold):
#                         probability = np.mean(intensities)
#                         G.add_edge((p[3], i), (q[3], j), probability)
#                     else:
#                         print("skipping the incorrect edge")
                        
                else:
#                     print(f"skipping point {j} in {skeleton_j} as it is too far from point {i} in {skeleton_j}")
                    break

print("possible edges that could connect broken skeletons are determined")

# Get the connected components of the graph
# connected_components = list(nx.connected_components(G))

# # If there are multiple connected components, add edges between the two closest
# # points from different components
# if len(connected_components) > 1:
#     for i, component_i in enumerate(connected_components):
#         for j, component_j in enumerate(connected_components[i+1:], start=i+1):
#             min_distance = float('inf')
#             min_edge = None
#             for u in component_i:
#                 for v in component_j:
#                     distance = np.sqrt(np.sum((skeletons[u[1]][u[0]][:3] - skeletons[v[1]][v[0]][:3]) ** 2))
#                     if distance < min_distance:
#                         min_distance = distance
#                         min_edge = (u, v)
#             G.add_edge(min_edge[0], min_edge[1], weight=1/min_distance)
